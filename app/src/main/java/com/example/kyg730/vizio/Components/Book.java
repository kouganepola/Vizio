package com.example.kyg730.vizio.Components;

import android.os.Parcel;
import android.os.Parcelable;

import org.greenrobot.greendao.annotation.*;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.kyg730.vizio.Components.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "BOOK".
 */
@Entity(active = true)
public class Book implements Parcelable{

    @Id
    private long Book_ID;

    @NotNull
    private String Name;
    private String Author;
    private String Publisher;
    private String CoverImagePath;
    private String Updated_Date;
    private String Summary;
    private String Cost;


    private static final Map<String, String> bookTagMap;
    static
    {
        bookTagMap = new HashMap<String, String>();
        bookTagMap.put("TAG_BOOK_ID", "Book_ID");
        bookTagMap.put("TAG_NAME", "Name");
        bookTagMap.put("TAG_AUTHOR", "Author");
        bookTagMap.put("TAG_UPDATED_DATE", "Updated_Date");
        bookTagMap.put("TAG_SUMMARY", "Summary");
        bookTagMap.put("TAG_COVER_IMAGE_PATH", "CoverImage_Path");
        bookTagMap.put("TAG_PUBLISHER_NAME", "Publisher_Name");
        bookTagMap.put("TAG_COST", "Cost");
    }

    @NotNull
    private String Acquired_Date;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient BookDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "Book_ID", referencedName = "Book_Id")
    })
    private List<ARContent> aRContentList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Book() {
    }

    public Book(long Book_ID) {
        this.Book_ID = Book_ID;
    }

    @Generated
    public Book(long Book_ID, String Name, String Author, String Publisher, String CoverImagePath, String Acquired_Date) {
        this.Book_ID = Book_ID;
        this.Name = Name;
        this.Author = Author;
        this.Publisher = Publisher;
        this.CoverImagePath = CoverImagePath;
        this.Acquired_Date = Acquired_Date;
    }

    public Book(long Book_ID, String Name, String Author, String Updated_Date, String Summary,  String CoverImagePath,String Publisher_Name, String Cost) {
        this.Book_ID = Book_ID;
        this.Name = Name;
        this.Author = Author;
        this.Updated_Date = Updated_Date;
        this.Summary = Summary;
        this.Cost = Cost;
        this.Publisher = Publisher_Name;
        this.CoverImagePath = CoverImagePath;

    }

    protected Book(Parcel in) {
        Book_ID = in.readLong();
        Name = in.readString();
        Author = in.readString();
        Publisher = in.readString();
        CoverImagePath = in.readString();
        Updated_Date = in.readString();
        Summary = in.readString();
        Cost = in.readString();
        Acquired_Date = in.readString();
    }

    public static final Creator<Book> CREATOR = new Creator<Book>() {
        @Override
        public Book createFromParcel(Parcel in) {
            return new Book(in);
        }

        @Override
        public Book[] newArray(int size) {
            return new Book[size];
        }
    };

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBookDao() : null;
    }

    public long getBook_ID() {
        return Book_ID;
    }

    public void setBook_ID(long Book_ID) {
        this.Book_ID = Book_ID;
    }

    @NotNull
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String Name) {
        this.Name = Name;
    }

    public String getAuthor() {
        return Author;
    }

    public void setAuthor(String Author) {
        this.Author = Author;
    }

    public String getPublisher() {
        return Publisher;
    }

    public void setSummary(String summary) {
        Summary = summary;
    }

    public void setCost(String cost) {
        Cost = cost;
    }

    public void setPublisher(String Publisher) {
        this.Publisher = Publisher;
    }

    public String getCoverImagePath() {
        return CoverImagePath;
    }

    public void setCoverImagePath(String CoverImagePath) {
        this.CoverImagePath = CoverImagePath;
    }

    @NotNull
    public String getAcquired_Date() {
        return Acquired_Date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAcquired_Date(@NotNull String Acquired_Date) {
        this.Acquired_Date = Acquired_Date;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ARContent> getARContentList() {
        if (aRContentList == null) {
            __throwIfDetached();
            ARContentDao targetDao = daoSession.getARContentDao();
            List<ARContent> aRContentListNew = targetDao._queryBook_ARContentList(Book_ID);
            synchronized (this) {
                if(aRContentList == null) {
                    aRContentList = aRContentListNew;
                }
            }
        }
        return aRContentList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetARContentList() {
        aRContentList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public String getUpdated_Date() {
        return Updated_Date;
    }

    public String getSummary() {
        return Summary;
    }

    public String getCost() {
        return Cost;
    }

    public static Map<String, String> getBookTagMap() {
        return bookTagMap;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeLong(Book_ID);
        parcel.writeString(Name);
        parcel.writeString(Author);
        parcel.writeString(Publisher);
        parcel.writeString(CoverImagePath);
        parcel.writeString(Updated_Date);
        parcel.writeString(Summary);
        parcel.writeString(Cost);
        parcel.writeString(Acquired_Date);
    }
}
