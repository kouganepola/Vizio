package com.example.kyg730.vizio.Components;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_ID = new Property(0, long.class, "Book_ID", true, "BOOK__ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "Author", false, "AUTHOR");
        public final static Property Publisher = new Property(3, String.class, "Publisher", false, "PUBLISHER");
        public final static Property CoverImagePath = new Property(4, String.class, "CoverImagePath", false, "COVER_IMAGE_PATH");
        public final static Property Acquired_Date = new Property(5, String.class, "Acquired_Date", false, "ACQUIRED__DATE");
    }

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"BOOK__ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Book_ID
                "\"NAME\" TEXT NOT NULL ," + // 1: Name
                "\"AUTHOR\" TEXT," + // 2: Author
                "\"PUBLISHER\" TEXT," + // 3: Publisher
                "\"COVER_IMAGE_PATH\" TEXT," + // 4: CoverImagePath
                "\"ACQUIRED__DATE\" TEXT NOT NULL );"); // 5: Acquired_Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBook_ID());
        stmt.bindString(2, entity.getName());
 
        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(3, Author);
        }
 
        String Publisher = entity.getPublisher();
        if (Publisher != null) {
            stmt.bindString(4, Publisher);
        }
 
        String CoverImagePath = entity.getCoverImagePath();
        if (CoverImagePath != null) {
            stmt.bindString(5, CoverImagePath);
        }
        stmt.bindString(6, entity.getAcquired_Date());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBook_ID());
        stmt.bindString(2, entity.getName());
 
        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(3, Author);
        }
 
        String Publisher = entity.getPublisher();
        if (Publisher != null) {
            stmt.bindString(4, Publisher);
        }
 
        String CoverImagePath = entity.getCoverImagePath();
        if (CoverImagePath != null) {
            stmt.bindString(5, CoverImagePath);
        }
        stmt.bindString(6, entity.getAcquired_Date());
    }

    @Override
    protected final void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getLong(offset + 0), // Book_ID
            cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Publisher
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CoverImagePath
            cursor.getString(offset + 5) // Acquired_Date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setBook_ID(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublisher(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverImagePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAcquired_Date(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setBook_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getBook_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
