package com.example.kyg730.vizio.Components;

import org.greenrobot.greendao.annotation.*;

import com.example.kyg730.vizio.Components.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ARCONTENT".
 */
@Entity(active = true)
public class ARContent {

    @Id(autoincrement = true)
    private long id;

    @NotNull
    private String TargetPath;

    @NotNull
    private String ModelPath;
    private long Book_Id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ARContentDao myDao;

    @ToOne(joinProperty = "Book_Id")
    private Book book;

    @Generated
    private transient Long book__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public ARContent() {
    }

    public ARContent(long id) {
        this.id = id;
    }

    @Generated
    public ARContent(long id, String TargetPath, String ModelPath, long Book_Id) {
        this.id = id;
        this.TargetPath = TargetPath;
        this.ModelPath = ModelPath;
        this.Book_Id = Book_Id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getARContentDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @NotNull
    public String getTargetPath() {
        return TargetPath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTargetPath(@NotNull String TargetPath) {
        this.TargetPath = TargetPath;
    }

    @NotNull
    public String getModelPath() {
        return ModelPath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModelPath(@NotNull String ModelPath) {
        this.ModelPath = ModelPath;
    }

    public long getBook_Id() {
        return Book_Id;
    }

    public void setBook_Id(long Book_Id) {
        this.Book_Id = Book_Id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Book getBook() {
        long __key = this.Book_Id;
        if (book__resolvedKey == null || !book__resolvedKey.equals(__key)) {
            __throwIfDetached();
            BookDao targetDao = daoSession.getBookDao();
            Book bookNew = targetDao.load(__key);
            synchronized (this) {
                book = bookNew;
            	book__resolvedKey = __key;
            }
        }
        return book;
    }

    @Generated
    public void setBook(Book book) {
        if (book == null) {
            throw new DaoException("To-one property 'Book_Id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.book = book;
            Book_Id = book.getBook_ID();
            book__resolvedKey = Book_Id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
